"use client";

import { useState, useEffect } from "react";
import { Button } from "@repo/ui/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@repo/ui/components/ui/card";
import { Badge } from "@repo/ui/components/ui/badge";
import { Checkbox } from "@repo/ui/components/ui/checkbox";
import { Separator } from "@repo/ui/components/ui/separator";
import { useToast } from "@repo/ui/hooks/use-toast";
import { 
  AlertTriangleIcon, 
  ClockIcon, 
  DollarSignIcon, 
  TrendingUpIcon, 
  ShieldIcon,
  RefreshCwIcon,
  CheckIcon,
  XIcon 
} from "lucide-react";
import { Position } from "../../monitoring/types";
import { CloseRecommendation } from "../close/types";

interface CloseProposal {
  id: string;
  positionId: string;
  position: Position;
  recommendation: CloseRecommendation;
  generatedAt: Date;
  status: "pending" | "approved" | "rejected" | "executed";
  estimatedSavings: number;
  urgency: "low" | "medium" | "high" | "critical";
  autoGenerated: boolean;
  ruleId?: string;
}

export function CloseProposalList() {
  const [proposals, setProposals] = useState<CloseProposal[]>([]);
  const [selectedProposals, setSelectedProposals] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [filter, setFilter] = useState<"all" | "pending" | "high_priority">("all");
  const { toast } = useToast();

  useEffect(() => {
    fetchProposals();
    // 5分ごとに自動更新
    const interval = setInterval(fetchProposals, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  const fetchProposals = async () => {
    setIsLoading(true);
    try {
      // TODO: 実際のAPIコールを実装
      // const recommendations = await PositionManagementService.getDailyCloseRecommendations();
      // const positions = await PositionManagementService.getAllOpenPositions();
      
      // モックデータ
      const mockPositions: Position[] = [
        {
          id: "pos1",
          accountId: "acc1",
          symbol: "EURUSD",
          type: "buy",
          lots: 1.0,
          openPrice: 1.0850,
          currentPrice: 1.0865,
          profit: 15.0,
          openTime: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000),
          updateTime: new Date(),
        },
        {
          id: "pos2",
          accountId: "acc2",
          symbol: "GBPUSD",
          type: "sell",
          lots: 0.5,
          openPrice: 1.2650,
          currentPrice: 1.2635,
          profit: 7.5,
          openTime: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000),
          updateTime: new Date(),
        },
        {
          id: "pos3",
          accountId: "acc1",
          symbol: "USDJPY",
          type: "buy",
          lots: 2.0,
          openPrice: 148.50,
          currentPrice: 148.25,
          profit: -50.0,
          openTime: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
          updateTime: new Date(),
        },
      ];

      const mockProposals: CloseProposal[] = [
        {
          id: "prop1",
          positionId: "pos1",
          position: mockPositions[0],
          recommendation: {
            positionId: "pos1",
            reason: "high_swap",
            priority: "high",
            swapCost: 12.5,
            holdingDays: 6,
            currentProfit: 15.0,
            estimatedSavings: 8.3,
          },
          generatedAt: new Date(Date.now() - 30 * 60 * 1000),
          status: "pending",
          estimatedSavings: 8.3,
          urgency: "high",
          autoGenerated: true,
          ruleId: "rule1",
        },
        {
          id: "prop2",
          positionId: "pos2",
          position: mockPositions[1],
          recommendation: {
            positionId: "pos2",
            reason: "long_holding",
            priority: "medium",
            swapCost: 6.8,
            holdingDays: 8,
            currentProfit: 7.5,
            estimatedSavings: 4.2,
          },
          generatedAt: new Date(Date.now() - 60 * 60 * 1000),
          status: "pending",
          estimatedSavings: 4.2,
          urgency: "medium",
          autoGenerated: true,
          ruleId: "rule2",
        },
        {
          id: "prop3",
          positionId: "pos3",
          position: mockPositions[2],
          recommendation: {
            positionId: "pos3",
            reason: "risk_management",
            priority: "high",
            swapCost: 3.2,
            holdingDays: 3,
            currentProfit: -50.0,
            estimatedSavings: 3.2,
          },
          generatedAt: new Date(Date.now() - 15 * 60 * 1000),
          status: "pending",
          estimatedSavings: 3.2,
          urgency: "critical",
          autoGenerated: false,
        },
      ];

      setProposals(mockProposals);
    } catch (error) {
      console.error("Error fetching proposals:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const approveProposal = async (proposalId: string) => {
    try {
      // TODO: 実際の決済処理実装
      setProposals(proposals.map(p => 
        p.id === proposalId ? { ...p, status: "approved" } : p
      ));

      toast({
        title: "提案承認",
        description: "決済提案を承認しました",
      });
    } catch (error) {
      console.error("Error approving proposal:", error);
      toast({
        title: "エラー",
        description: "提案の承認に失敗しました",
      });
    }
  };

  const rejectProposal = async (proposalId: string) => {
    try {
      setProposals(proposals.map(p => 
        p.id === proposalId ? { ...p, status: "rejected" } : p
      ));

      toast({
        title: "提案却下",
        description: "決済提案を却下しました",
      });
    } catch (error) {
      console.error("Error rejecting proposal:", error);
      toast({
        title: "エラー",
        description: "提案の却下に失敗しました",
      });
    }
  };

  const batchApprove = async () => {
    try {
      for (const proposalId of selectedProposals) {
        await approveProposal(proposalId);
      }
      setSelectedProposals([]);
    } catch (error) {
      console.error("Error in batch approve:", error);
    }
  };

  const getUrgencyIcon = (urgency: string) => {
    switch (urgency) {
      case "critical": return <AlertTriangleIcon className="h-4 w-4 text-red-500" />;
      case "high": return <AlertTriangleIcon className="h-4 w-4 text-orange-500" />;
      case "medium": return <ClockIcon className="h-4 w-4 text-yellow-500" />;
      default: return <ClockIcon className="h-4 w-4 text-green-500" />;
    }
  };

  const getUrgencyColor = (urgency: string) => {
    switch (urgency) {
      case "critical": return "border-red-500 bg-red-50";
      case "high": return "border-orange-500 bg-orange-50";
      case "medium": return "border-yellow-500 bg-yellow-50";
      default: return "border-green-500 bg-green-50";
    }
  };

  const getReasonIcon = (reason: string) => {
    switch (reason) {
      case "high_swap": return <DollarSignIcon className="h-4 w-4 text-red-500" />;
      case "long_holding": return <ClockIcon className="h-4 w-4 text-yellow-500" />;
      case "profit_target": return <TrendingUpIcon className="h-4 w-4 text-green-500" />;
      case "risk_management": return <ShieldIcon className="h-4 w-4 text-red-500" />;
      default: return <AlertTriangleIcon className="h-4 w-4 text-gray-500" />;
    }
  };

  const getReasonText = (reason: string) => {
    switch (reason) {
      case "high_swap": return "高スワップコスト";
      case "long_holding": return "長期保有";
      case "profit_target": return "利益目標達成";
      case "risk_management": return "リスク管理";
      default: return reason;
    }
  };

  const filteredProposals = proposals.filter(proposal => {
    switch (filter) {
      case "pending": return proposal.status === "pending";
      case "high_priority": return ["high", "critical"].includes(proposal.urgency);
      default: return true;
    }
  });

  const pendingCount = proposals.filter(p => p.status === "pending").length;
  const criticalCount = proposals.filter(p => p.urgency === "critical").length;
  const totalSavings = proposals.reduce((sum, p) => sum + p.estimatedSavings, 0);

  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle>決済提案リスト</CardTitle>
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={fetchProposals} disabled={isLoading}>
              <RefreshCwIcon className="h-4 w-4" />
            </Button>
            {selectedProposals.length > 0 && (
              <Button size="sm" onClick={batchApprove}>
                一括承認 ({selectedProposals.length})
              </Button>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {/* サマリー統計 */}
        <div className="grid grid-cols-4 gap-4 mb-6">
          <div className="bg-blue-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-blue-600">{pendingCount}</div>
            <div className="text-sm text-gray-600">保留中</div>
          </div>
          <div className="bg-red-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-red-600">{criticalCount}</div>
            <div className="text-sm text-gray-600">緊急</div>
          </div>
          <div className="bg-green-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-green-600">${totalSavings.toFixed(2)}</div>
            <div className="text-sm text-gray-600">予想節約額</div>
          </div>
          <div className="bg-purple-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-purple-600">
              {proposals.filter(p => p.autoGenerated).length}
            </div>
            <div className="text-sm text-gray-600">自動生成</div>
          </div>
        </div>

        {/* フィルター */}
        <div className="flex space-x-2 mb-4">
          <Button
            variant={filter === "all" ? "default" : "outline"}
            size="sm"
            onClick={() => setFilter("all")}
          >
            全て ({proposals.length})
          </Button>
          <Button
            variant={filter === "pending" ? "default" : "outline"}
            size="sm"
            onClick={() => setFilter("pending")}
          >
            保留中 ({pendingCount})
          </Button>
          <Button
            variant={filter === "high_priority" ? "default" : "outline"}
            size="sm"
            onClick={() => setFilter("high_priority")}
          >
            高優先度 ({proposals.filter(p => ["high", "critical"].includes(p.urgency)).length})
          </Button>
        </div>

        {/* 提案一覧 */}
        <div className="space-y-3">
          {isLoading ? (
            <div className="text-center py-8 text-gray-500">
              提案を読み込み中...
            </div>
          ) : filteredProposals.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              該当する決済提案がありません
            </div>
          ) : (
            filteredProposals.map((proposal) => (
              <Card 
                key={proposal.id} 
                className={`border-l-4 ${getUrgencyColor(proposal.urgency)}`}
              >
                <CardContent className="p-4">
                  <div className="flex items-start space-x-3">
                    {proposal.status === "pending" && (
                      <Checkbox
                        checked={selectedProposals.includes(proposal.id)}
                        onCheckedChange={(checked) => {
                          if (checked) {
                            setSelectedProposals([...selectedProposals, proposal.id]);
                          } else {
                            setSelectedProposals(selectedProposals.filter(id => id !== proposal.id));
                          }
                        }}
                      />
                    )}

                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        {getUrgencyIcon(proposal.urgency)}
                        <span className="font-medium">
                          {proposal.position.symbol} 
                          {proposal.position.type === "buy" ? " 買い" : " 売り"} 
                          {proposal.position.lots}lot
                        </span>
                        <div className="flex items-center space-x-1">
                          {getReasonIcon(proposal.recommendation.reason)}
                          <Badge variant="outline">
                            {getReasonText(proposal.recommendation.reason)}
                          </Badge>
                        </div>
                        <Badge variant={proposal.autoGenerated ? "secondary" : "default"}>
                          {proposal.autoGenerated ? "自動生成" : "手動生成"}
                        </Badge>
                        <Badge 
                          variant={
                            proposal.status === "pending" ? "secondary" :
                            proposal.status === "approved" ? "default" :
                            proposal.status === "executed" ? "default" : "destructive"
                          }
                        >
                          {proposal.status === "pending" ? "保留中" :
                           proposal.status === "approved" ? "承認済み" :
                           proposal.status === "executed" ? "実行済み" : "却下"}
                        </Badge>
                      </div>

                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-3">
                        <div>
                          <div className="text-gray-500">現在損益</div>
                          <div className={`font-medium ${proposal.position.profit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                            ${proposal.position.profit.toFixed(2)}
                          </div>
                        </div>
                        <div>
                          <div className="text-gray-500">スワップコスト</div>
                          <div className="font-medium text-red-600">
                            -${proposal.recommendation.swapCost.toFixed(2)}
                          </div>
                        </div>
                        <div>
                          <div className="text-gray-500">保有期間</div>
                          <div className="font-medium">
                            {proposal.recommendation.holdingDays}日
                          </div>
                        </div>
                        <div>
                          <div className="text-gray-500">予想節約額</div>
                          <div className="font-medium text-green-600">
                            +${proposal.estimatedSavings.toFixed(2)}
                          </div>
                        </div>
                      </div>

                      <div className="text-xs text-gray-500">
                        生成日時: {proposal.generatedAt.toLocaleString()}
                        {proposal.ruleId && ` | ルールID: ${proposal.ruleId}`}
                      </div>
                    </div>

                    {proposal.status === "pending" && (
                      <div className="flex space-x-2">
                        <Button
                          size="sm"
                          onClick={() => approveProposal(proposal.id)}
                        >
                          <CheckIcon className="h-4 w-4 mr-1" />
                          承認
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => rejectProposal(proposal.id)}
                        >
                          <XIcon className="h-4 w-4 mr-1" />
                          却下
                        </Button>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))
          )}
        </div>

        {/* 一括操作 */}
        {selectedProposals.length > 0 && (
          <>
            <Separator className="my-4" />
            <div className="flex justify-between items-center bg-blue-50 p-3 rounded-lg">
              <span className="font-medium">
                {selectedProposals.length} 件の提案を選択中
              </span>
              <div className="space-x-2">
                <Button size="sm" onClick={batchApprove}>
                  一括承認
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setSelectedProposals([])}
                >
                  選択解除
                </Button>
              </div>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  );
}