name: Hedge System Release

on:
  push:
    tags:
      - 'hedge-system-v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -pe "require('./apps/hedge-system/package.json').version")" >> $GITHUB_ENV

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `hedge-system-v${process.env.PACKAGE_VERSION}`,
              name: `Hedge System v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust targets for macOS
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './apps/hedge-system/src-tauri -> target'


      - name: Install frontend dependencies
        run: npm ci --include=optional

      - name: Build applications and packages
        env:
          PARCEL_WATCHER_BACKEND: fs
        run: npx turbo build --filter=hedge-system...


      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: './apps/hedge-system'
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
          includeUpdaterJson: true

      - name: Upload to S3 via Amplify
        if: startsWith(matrix.platform, 'macos') || startsWith(matrix.platform, 'windows')
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-1
        run: |
          # Get version for S3 path
          PACKAGE_VERSION=$(node -pe "require('./apps/hedge-system/package.json').version")
          
          # Determine bundle directory based on platform and target
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.args }}" == "--target aarch64-apple-darwin" ]]; then
              BUNDLE_DIR="./apps/hedge-system/src-tauri/target/aarch64-apple-darwin/release/bundle"
            elif [[ "${{ matrix.args }}" == "--target x86_64-apple-darwin" ]]; then
              BUNDLE_DIR="./apps/hedge-system/src-tauri/target/x86_64-apple-darwin/release/bundle"
            else
              BUNDLE_DIR="./apps/hedge-system/src-tauri/target/release/bundle"
            fi
          else
            BUNDLE_DIR="./apps/hedge-system/src-tauri/target/release/bundle"
          fi
          
          # デバッグ：生成されたファイルを確認
          echo "=== Bundle directory contents ==="
          find ${BUNDLE_DIR} -type f -name "*.json" -o -name "*.sig" | sort
          echo "=== End of bundle directory contents ==="
          
          # S3にビルド成果物をアップロード
          aws s3 sync ${BUNDLE_DIR}/ s3://amplify-arbitrageassistantreleases/releases/hedge-system/v${PACKAGE_VERSION}/
          
          # latest.jsonファイルを検索してアップロード（様々な可能性のあるパスを確認）
          LATEST_JSON_FOUND=false
          
          # Tauriが生成したlatest.jsonを探す（様々な可能性のあるパスを確認）
          for json_path in \
            "./apps/hedge-system/src-tauri/latest.json" \
            "./apps/hedge-system/latest.json" \
            "${BUNDLE_DIR}/nsis/latest.json" \
            "${BUNDLE_DIR}/macos/latest.json" \
            "${BUNDLE_DIR}/appimage/latest.json" \
            "${BUNDLE_DIR}/latest.json" \
            "./apps/hedge-system/src-tauri/target/release/bundle/nsis/latest.json" \
            "./apps/hedge-system/src-tauri/target/release/bundle/macos/latest.json" \
            "./apps/hedge-system/src-tauri/target/release/latest.json" \
            "./apps/hedge-system/src-tauri/target/aarch64-apple-darwin/release/latest.json" \
            "./apps/hedge-system/src-tauri/target/x86_64-apple-darwin/release/latest.json"; do
            
            if [ -f "$json_path" ]; then
              echo "Found latest.json at: $json_path"
              cat "$json_path" | jq '.'
              aws s3 cp "$json_path" s3://amplify-arbitrageassistantreleases/releases/hedge-system/latest.json
              LATEST_JSON_FOUND=true
              break
            fi
          done
          
          # latest.jsonが見つからない場合、手動で生成
          if [ "$LATEST_JSON_FOUND" = false ]; then
            echo "latest.json not found, creating manually..."
            
            # 署名ファイルを読み込む関数
            read_signature() {
              local sig_file="$1"
              if [ -f "$sig_file" ]; then
                cat "$sig_file" | tr -d '\n'
              else
                echo ""
              fi
            }
            
            # 各プラットフォームの署名ファイルを探して読み込む
            MACOS_SIG=$(read_signature "${BUNDLE_DIR}/macos/Hedge System.app.tar.gz.sig")
            WINDOWS_SIG=$(read_signature "${BUNDLE_DIR}/nsis/Hedge System_${PACKAGE_VERSION}_x64-setup.exe.sig")
            
            # 署名ファイルが見つからない場合、別の場所も確認
            if [ -z "$MACOS_SIG" ]; then
              # スペースをエスケープしたパスも試す
              MACOS_SIG=$(read_signature "${BUNDLE_DIR}/macos/Hedge%20System.app.tar.gz.sig")
            fi
            
            if [ -z "$WINDOWS_SIG" ]; then
              # スペースをエスケープしたパスも試す
              WINDOWS_SIG=$(read_signature "${BUNDLE_DIR}/nsis/Hedge%20System_${PACKAGE_VERSION}_x64-setup.exe.sig")
            fi
            
            echo "macOS signature found: ${MACOS_SIG:0:20}..."
            echo "Windows signature found: ${WINDOWS_SIG:0:20}..."
            
            cat > /tmp/latest.json << EOF
          {
            "version": "${PACKAGE_VERSION}",
            "notes": "リリース v${PACKAGE_VERSION}",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "platforms": {
              "darwin-aarch64": {
                "signature": "${MACOS_SIG}",
                "url": "https://amplify-arbitrageassistantreleases.s3.ap-northeast-1.amazonaws.com/releases/hedge-system/v${PACKAGE_VERSION}/macos/Hedge%20System.app.tar.gz"
              },
              "darwin-x86_64": {
                "signature": "${MACOS_SIG}",
                "url": "https://amplify-arbitrageassistantreleases.s3.ap-northeast-1.amazonaws.com/releases/hedge-system/v${PACKAGE_VERSION}/macos/Hedge%20System.app.tar.gz"
              },
              "windows-x86_64": {
                "signature": "${WINDOWS_SIG}",
                "url": "https://amplify-arbitrageassistantreleases.s3.ap-northeast-1.amazonaws.com/releases/hedge-system/v${PACKAGE_VERSION}/nsis/Hedge%20System_${PACKAGE_VERSION}_x64-setup.exe"
              }
            }
          }
          EOF
            aws s3 cp /tmp/latest.json s3://amplify-arbitrageassistantreleases/releases/hedge-system/latest.json
          fi

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })