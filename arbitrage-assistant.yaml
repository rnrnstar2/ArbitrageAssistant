# ArbitrageAssistant - 正しいHaconiwa設計（公式構造）
# Organization CRD → Space CRD → Task CRDs

# ==========================================
# Organization CRD - 専門家チーム定義
# ==========================================
apiVersion: haconiwa.dev/v1
kind: Organization
metadata:
  name: arbitrage-assistant-org
  version: "1.0.0"
spec:
  companyName: "ArbitrageAssistant Development"
  industry: "FinTech Software Development"
  hierarchy:
    CEO: "CEO Arbitrage"
    Directors: ["Backend Director", "Trading Director", "Integration Director", "Frontend Director", "DevOps Director"]
    Specialists: ["GraphQL Specialist", "Arbitrage Specialist", "MT5 Connector Specialist", "React Specialist", "Build Optimization Engineer"]
    Engineers: ["AWS Integration Expert", "Position Manager", "WebSocket Engineer", "Desktop App Engineer", "Quality Assurance Engineer"]
  teams:
    - name: "Backend Architecture Team"
      description: "AWS Amplify Gen2 + GraphQL + userIdベース最適化専門部門"
      roles:
        - name: "Backend Director"
          description: "バックエンドアーキテクチャの設計・実装・最適化責任者"
        - name: "GraphQL Specialist" 
          description: "GraphQL実装・最適化専門家"
        - name: "AWS Integration Expert"
          description: "AWS Amplify統合・Cognito認証専門家"
    
    - name: "Trading Systems Team"
      description: "アービトラージエンジン・ポジション管理・金融計算専門部門"
      roles:
        - name: "Trading Director"
          description: "取引システム設計・実装・リスク管理責任者"
        - name: "Arbitrage Specialist"
          description: "アービトラージ計算・アルゴリズム専門家"
        - name: "Position Manager"
          description: "ポジション管理・状態遷移専門家"
    
    - name: "Integration Systems Team"
      description: "MT4/MT5統合・WebSocket通信・外部API連携専門部門"
      roles:
        - name: "Integration Director"
          description: "外部統合システム設計・実装・保守責任者"
        - name: "MT5 Connector Specialist"
          description: "MT4/MT5統合・EA開発専門家"
        - name: "WebSocket Engineer"
          description: "WebSocket通信・プロトコル設計専門家"
    
    - name: "Frontend Experience Team"
      description: "管理画面・デスクトップUI・ユーザー体験専門部門"
      roles:
        - name: "Frontend Director"
          description: "フロントエンド全体設計・UX最適化責任者"
        - name: "React Specialist"
          description: "React・Next.js・UI実装専門家"
        - name: "Desktop App Engineer"
          description: "Tauri・デスクトップアプリ専門家"
    
    - name: "DevOps & QA Team"
      description: "インフラ最適化・品質保証・CI/CD・監視専門部門"
      roles:
        - name: "DevOps Director"
          description: "インフラ・CI/CD・品質管理責任者"
        - name: "Build Optimization Engineer"
          description: "Turborepo・ビルド最適化専門家"
        - name: "Quality Assurance Engineer"
          description: "テスト・品質保証・監視専門家"

---
# ==========================================
# Space CRD - 開発空間・部屋定義
# ==========================================
apiVersion: haconiwa.dev/v1
kind: Space
metadata:
  name: arbitrage-assistant-space
  version: "1.0.0"
spec:
  # セキュリティポリシー
  securityPolicy:
    requireAuth: true
    allowedPorts: [3000, 8080, 1420, 5173, 4173]  # Next.js, Tauri, Vite
    restrictedPaths: ["node_modules", ".git", ".env*", "*.key", "*.pem"]
    auditLog: true
    maxSessionTime: "8h"
    autoLogout: true
  
  # パフォーマンス指標
  performanceTargets:
    buildTime: "< 30s"
    lintTime: "< 10s" 
    testCoverage: "> 90%"
    memoryUsage: "< 2GB"
    cpuUsage: "< 80%"
  
  # タスクブランチ管理
  branchStrategy:
    patterns: ["feature/*", "bugfix/*", "hotfix/*", "mvp/*", "task/*"]
    isolationLevel: "room"
    autoCleanup: true
    maxBranches: 10
  
  # 6 Window構成（CEO + 5 Directors）
  grid: "6x1"
  
  # Room定義（各Windowに対応）
  rooms:
    - id: "room-ceo"
      name: "🏛️ CEO Executive Office"
      description: "Strategic MVP leadership using parallel development tools"
      agentId: "ceo-arbitrage"
    
    - id: "room-backend"
      name: "🗄️ Backend Architecture"
      description: "AWS Amplify Gen2 + GraphQL + userIdベース最適化専門部門"
      agentId: "backend-director"
    
    - id: "room-trading"
      name: "⚡ Trading Systems"
      description: "アービトラージエンジン・ポジション管理・金融計算専門部門"
      agentId: "trading-director"
    
    - id: "room-integration"
      name: "🔌 Integration Systems"
      description: "MT4/MT5統合・WebSocket通信・外部API連携専門部門"
      agentId: "integration-director"
    
    - id: "room-frontend"
      name: "🎨 Frontend Experience"
      description: "管理画面・デスクトップUI・ユーザー体験専門部門"
      agentId: "frontend-director"
    
    - id: "room-devops"
      name: "🚀 DevOps & QA"
      description: "インフラ最適化・品質保証・CI/CD・監視専門部門"
      agentId: "devops-director"

  nations:
    - id: arbitrage-nation
      name: "ArbitrageAssistant Nation"
      cities:
        - id: mvp-city
          name: "MVP Development City"
          villages:
            - id: development-village
              name: "Development Village"
              companies:
                - name: arbitrage-assistant
                  basePath: "./"
                  
                  gitRepo:
                    url: "https://github.com/rnrnstar2/ArbitrageAssistant"
                    defaultBranch: "dev"
                    auth: "https"
                  
                  agentDefaults:
                    type: "claude-code"
                    permissions:
                      allow:
                        - "Bash(npm run *)"
                        - "Bash(cd *)"
                        - "Bash(git *)"
                        - "Edit(*)"
                        - "Read(*)"
                        - "Write(*)"
                      deny:
                        - "Bash(rm -rf /)"
                        - "Bash(sudo *)"

---
# ==========================================
# Task CRDs - MVP開発タスク定義
# ==========================================
apiVersion: haconiwa.dev/v1
kind: Task
metadata:
  name: mvp-graphql-backend
  version: "1.0.0"
spec:
  id: "task-mvp-graphql-backend"
  title: "MVP GraphQL バックエンド基盤実装"
  description: |
    ArbitrageAssistant MVPのGraphQLバックエンド基盤を実装します。
    
    【必須要件】
    - User、Account、Position、Actionモデルの基本CRUD
    - userIdベースGSI設定（高速検索）
    - GraphQL Subscription（リアルタイム同期）
    - Cognito認証システム統合
    
    【成果物】
    - packages/shared-backend/amplify/data/resource.ts 完全実装
    - 基本GraphQLスキーマ定義
    - リアルタイム機能確認
    
    【制約事項】
    ❌ 複雑なリレーション設計は実装禁止
    ❌ 高度なクエリ最適化は後回し
    ✅ 基本的なCRUD操作の確実な動作を最優先
  assignee: "backend-director"
  priority: "high"
  branch: "feature/01_mvp_graphql_backend"
  defaultBranch: "dev"
  worktree: true
  spaceRef: "arbitrage-assistant-space"
  room: "room-backend"

---
apiVersion: haconiwa.dev/v1
kind: Task
metadata:
  name: mvp-arbitrage-engine
  version: "1.0.0"
spec:
  id: "task-mvp-arbitrage-engine"
  title: "MVP アービトラージエンジン基盤実装"
  description: |
    ArbitrageAssistant MVPのアービトラージエンジン基盤を実装します。
    
    【必須要件】
    - PENDING→OPENING→OPEN状態遷移の確実実行
    - 金融計算精度小数点5桁程度
    - 基本アービトラージロジック実装
    - ポジション管理システム
    
    【成果物】
    - apps/hedge-system/lib/hedge-system-core.ts 基本実装
    - apps/hedge-system/lib/position-execution.ts 状態管理
    - アービトラージ計算ロジック
    
    【制約事項】
    ❌ 複雑なアルゴリズム実装は禁止
    ❌ 高度な最適化は後回し
    ✅ 確実に動作する基本取引機能を最優先
  assignee: "trading-director"
  priority: "high"
  branch: "feature/02_mvp_arbitrage_engine"
  defaultBranch: "dev"
  worktree: true
  spaceRef: "arbitrage-assistant-space"
  room: "room-trading"

---
apiVersion: haconiwa.dev/v1
kind: Task
metadata:
  name: mvp-mt5-integration
  version: "1.0.0"
spec:
  id: "task-mvp-mt5-integration"
  title: "MVP MT5統合システム基盤実装"
  description: |
    ArbitrageAssistant MVPのMT5統合システム基盤を実装します。
    
    【必須要件】
    - WebSocket通信低遅延実現
    - MT5 EA基本機能実装
    - エラー回復機能
    - 通信プロトコル設計
    
    【成果物】
    - ea/HedgeSystemConnector.mq5 基本EA
    - ea/websocket-dll/HedgeSystemWebSocket.cpp WebSocket実装
    - apps/hedge-system/lib/websocket-server.ts サーバー側
    
    【制約事項】
    ❌ 複雑な通信プロトコル実装は禁止
    ❌ 高度な最適化は後回し
    ✅ 確実に動作する基本通信機能を最優先
  assignee: "integration-director"
  priority: "high"
  branch: "feature/03_mvp_mt5_integration"
  defaultBranch: "dev"
  worktree: true
  spaceRef: "arbitrage-assistant-space"
  room: "room-integration"

---
apiVersion: haconiwa.dev/v1
kind: Task
metadata:
  name: mvp-admin-dashboard
  version: "1.0.0"
spec:
  id: "task-mvp-admin-dashboard"
  title: "MVP 管理画面基盤実装"
  description: |
    ArbitrageAssistant MVPの管理画面基盤を実装します。
    
    【必須要件】
    - ポジション・アカウント表示
    - リアルタイム更新機能
    - 高速初期表示
    - 直感的なUI設計
    
    【成果物】
    - apps/admin/app/dashboard/page.tsx メインダッシュボード
    - apps/admin/features/accounts/ アカウント管理
    - apps/admin/features/positions/ ポジション表示
    
    【制約事項】
    ❌ 装飾的なUI要素実装は禁止
    ❌ 複雑なアニメーションは後回し
    ✅ 確実に動作する基本表示機能を最優先
  assignee: "frontend-director"
  priority: "high"
  branch: "feature/04_mvp_admin_dashboard"
  defaultBranch: "dev"
  worktree: true
  spaceRef: "arbitrage-assistant-space"
  room: "room-frontend"

---
apiVersion: haconiwa.dev/v1
kind: Task
metadata:
  name: mvp-build-optimization
  version: "1.0.0"
spec:
  id: "task-mvp-build-optimization"
  title: "MVP ビルド最適化・品質保証実装"
  description: |
    ArbitrageAssistant MVPのビルド最適化と品質保証を実装します。
    
    【必須要件】
    - Turborepo設定最適化
    - ESLint 0 warnings品質基準維持
    - GitHub Actions CI/CD設定
    - キャッシュ効率化
    
    【成果物】
    - turbo.json 最適化設定
    - .github/workflows/ CI/CD設定
    - 品質チェック自動化
    
    【制約事項】
    ❌ 複雑な最適化設定は実装禁止
    ❌ 高度なキャッシュ戦略は後回し
    ✅ 確実に動作する基本ビルド設定を最優先
  assignee: "devops-director"
  priority: "medium"
  branch: "enhancement/05_mvp_build_optimization"
  defaultBranch: "dev"
  worktree: true
  spaceRef: "arbitrage-assistant-space"
  room: "room-devops"